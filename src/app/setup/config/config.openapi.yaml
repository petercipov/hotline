openapi: 3.0.3
info:
  title: Config API
  description: API for managing integration Service Levels
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    email: petercipov@gmail.com
    name: Peter Cipov
    url: https://www.petercipov.com/

servers:
  - url: /api/v1

security:
  - bearerAuth: []

paths:
  /request-schemas:
    get:
      summary: List request schemas
      description: Retrieve list of request schemas
      operationId: listSchemas
      tags:
        - Request Schemas
      responses:
        '200':
          description: List of Request Schemas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRequestSchemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create Schema
      description: Upload schema for request validation
      operationId: uploadSchema
      tags:
        - Request Schemas
      requestBody:
        description: Schema definition
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: '#/components/schemas/SchemaTitle'
      responses:
        '201':
          description: Created request schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequestSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /request-schemas/{schemaid}:
    put:
      summary: Update Schema
      description: Update request schema
      operationId: updateSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
      requestBody:
        description: Schema definition
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: '#/components/schemas/SchemaTitle'
      responses:
        '201':
          description: Udated request schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequestSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get Schema
      description: Get request schema
      operationId: getSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'

      responses:
        '200':
          description: Get request schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRequestSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete Schema
      description: Delete request schema
      operationId: deleteSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
      responses:
        '204':
          description: Request schema deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /request-schemas/{schemaid}/file/{filename}:
    get:
      summary: Get Schema File
      description: Get request schema file
      operationId: getSchemaFile
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
        - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Get request schema file
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JSONSchemaFileContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete Schema File
      description: Delete request schema file
      operationId: deleteSchemaFile
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
        - $ref: '#/components/parameters/FileName'
      responses:
        '204':
          description: Request schema file deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Upload Schema File
      description: Upload request schema file
      operationId: uploadSchemaFile
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
        - $ref: '#/components/parameters/FileName'
      requestBody:
        description: Schema definition
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                jsonschema:
                  $ref: '#/components/schemas/JSONSchemaFileContent'
      responses:
        '201':
          description: Request schema file created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          

  /service-levels:
    get:
      summary: List Service Levels
      description: Retrieve HTTP API Service Levels
      operationId: getServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '200':
          description: List Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelsList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Upserts Service Levels
      description: Upsert Service Levels
      operationId: upsertServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      requestBody:
        description: Service Levels details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertServiceLevelsRequest'
      responses:
        '200':
          description: Updated Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedServiceLevelsResponse'
        '201':
          description: Created Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedServiceLevelsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /service-levels/{routekey}:
    delete:
      summary: Delete Service Levels
      description: Delete an existing Service Levels
      operationId: deleteServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/RouteKey'
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '204':
          description: Service Level deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    RouteKey:
      in: path
      required: true
      name: routekey
      description: unique key defining route
      schema:
        $ref: '#/components/schemas/RouteKey'

    IntegrationID:
      name: x-integration-id
      in: header
      required: true
      description: Unique identifier of an integration
      schema:
        $ref: '#/components/schemas/IntegrationID'

    SchemaID:
      name: schemaid
      in: path
      required: true
      description: Unique identifier of the request schema
      schema:
        $ref: '#/components/schemas/SchemaID'

    FileName:
      name: filename
      in: path
      required: true
      description: Unique identifier of the request schema file
      schema:
        $ref: '#/components/schemas/SchemaFileName'

  schemas:
    IntegrationID:
      type: string
      minLength: 32
      maxLength: 32
      pattern: "IN[A-Z0-9]+"
      example: IN7AB56CD456OP98BN54CAUB43211OU7

    SchemaID:
      type: string
      minLength: 32
      maxLength: 32
      pattern: "S[A-Z0-9]+"
      example: S7AB56CD456OP98BN54CAUB43211OU78

    JSONSchemaFileContent:
      type: string
      format: binary
      example: "{}"
      minLength: 2
      maxLength: 355000
      description: https://json-schema.org/draft/2020-12/json-schema-core.html

    SchemaFileName:
      type: string
      enum: [
        "request-headers.json",
        "request-query.json",
        "request-body.json",
        "response-headers.json",
        "response-body.json"
      ]

    DateTime:
      type: string
      format: date-time
      minLength: 20
      maxLength: 20
      description: https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 - RFC3339 date-time in UTC
      example: "2017-07-21T17:32:28Z"

    SchemaTitle:
      type: string
      pattern: "[a-zA-Z0-9_\\- ]+"
      description: Schema title
      maxLength: 256
      minLength: 1
      example: "Request schema"

    GetRequestSchemaResponse:
      type: object
      required:
        - updatedAt
      properties:
        title:
          $ref: '#/components/schemas/SchemaTitle'
        files:
          items:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/SchemaFileName'
              updatedAt:
                $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    UploadRequestSchemaResponse:
      type: object
      properties:
        schemaID:
          $ref: '#/components/schemas/SchemaID'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    ListRequestSchemas:
      type: object
      required:
        - schemas
      properties:
        schemas:
          type: array
          maxItems: 1024
          items:
            required:
              - schemaID
              - title
              - updatedAt
            properties:
              schemaID:
                $ref: '#/components/schemas/SchemaID'
              title:
                $ref: '#/components/schemas/SchemaTitle'
              updatedAt:
                $ref: '#/components/schemas/DateTime'
          description: List of uploaded schemas

    UpsertedServiceLevelsResponse:
      type: object
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'

    UpsertServiceLevelsRequest:
      type: object
      required:
        - route
        - latency
        - status
      properties:
        route:
          $ref: '#/components/schemas/Route'
        latency:
          $ref: '#/components/schemas/LatencyServiceLevels'
        status:
          $ref: '#/components/schemas/StatusServiceLevels'
        validation:
          $ref: '#/components/schemas/ValidationServiceLevels'

    RouteKey:
      type: string
      format: uri
      minLength: 1
      maxLength: 8196
      example: GET:api.example.com:8080:/api/users/{id}

    ServiceLevelsList:
      type: object
      description: List of Service Levels for an integration
      required:
        - routes
      properties:
        routes:
          type: array
          maxItems: 1024
          items:
            $ref: '#/components/schemas/RouteServiceLevels'
          description: List of route-specific Service Levels

    Route:
      type: object
      properties:
        method:
          type: string
          enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
          description: HTTP method (GET, POST, PUT, DELETE, etc.)
          example: "GET"
        host:
          type: string
          format: uri
          minLength: 1
          maxLength: 65535
          description: Host name
          example: "api.example.com"
        port:
          type: integer
          minimum: 1
          maximum: 65535
          format: int32
          example: 8080
        path:
          type: string
          format: uri
          minLength: 1
          maxLength: 8192
          description: URL path pattern
          example: "/api/users/{id}"

    RouteServiceLevels:
      type: object
      required:
        - routeKey
        - route
        - latency
        - status
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'
        route:
          $ref: '#/components/schemas/Route'
        latency:
          $ref: '#/components/schemas/LatencyServiceLevels'
        status:
          $ref: '#/components/schemas/StatusServiceLevels'
        validation:
          $ref: '#/components/schemas/ValidationServiceLevels'

    LatencyServiceLevels:
      type: object
      required:
        - percentiles
        - windowDuration
      properties:
        percentiles:
          type: array
          maxItems: 124
          items:
            $ref: '#/components/schemas/PercentileThreshold'
          description: Latency percentiles
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    ValidationServiceLevels:
      type: object
      required:
        - schemaId
        - breachThreshold
        - windowDuration
      properties:
        schemaId:
          $ref: '#/components/schemas/SchemaID'
        breachThreshold:
          $ref: '#/components/schemas/PercentileValue'
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    StatusServiceLevels:
      type: object
      required:
        - expected
        - breachThreshold
        - windowDuration
      properties:
        expected:
          type: array
          maxItems: 128
          items:
            type: string
            format: string
            enum: [ "100", "101", "102", "103",
                    "200", "201", "202", "203", "204", "205", "206", "207", "208", "218", "226",
                    "300", "301", "302", "303", "304", "305", "306", "307", "308",
                    "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410",
                    "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421",
                    "422", "423", "424", "426", "428", "429", "430", "431", "440", "444", "449",
                    "450", "451", "460", "463", "464", "494", "495", "496", "497", "498", "499",
                    "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511",
                    "520", "521", "522", "523", "524", "525", "526", "527", "529", "530", "540", "561", "598", "599"
            ]
          description: List of expected HTTP status codes
          example: ["200", "201", "204"]
        breachThreshold:
          $ref: '#/components/schemas/PercentileValue'
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    PercentileThreshold:
      type: object
      required:
        - percentile
        - breachLatency
      properties:
        percentile:
          $ref: '#/components/schemas/PercentileValue'
        breachLatency:
          $ref: '#/components/schemas/LatencyValue'

    PercentileValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(\\.\\d+)?%$"
      description: Percentile value (0.0% to 100.0%)
      example: "99.9%"
      x-go-type: Percentile

    WindowValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(s|m|h|d)$"
      x-go-type: Duration
      description: Duration string (e.g., "5m", "1h", "30s")
      example: "1h"

    LatencyValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(s|m|h|d)$"
      x-go-type: Duration
      description: Latency threshold (e.g., "1s", "2500ms", "20s")
      example: "2s"

    Error:
      type: object
      description: Detailed error response
      required:
        - code
        - message
      properties:
        code:
          type: string
          format: string
          minLength: 1
          maxLength: 64
          description: Error code
        message:
          type: string
          format: string
          minLength: 1
          maxLength: 1024
          description: Human-readable error message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      description: RFC8725 Compliant JWT
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Request Schemas
    description: Operations for managing HTTP request schemas
  - name: Service Levels
    description: Operations for managing integration Service Levels
