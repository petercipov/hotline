openapi: 3.0.3
info:
  title: Config API
  description: API for managing integration Service Levels
  version: 0.0.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    email: petercipov@gmail.com
    name: Peter Cipov
    url: https://www.petercipov.com/

servers:
  - url: /api/v1

security:
  - bearerAuth: []

paths:
  /request-validations:
    get:
      summary: List Request Validations
      description: Retrieve Request Validations
      operationId: listRequestValidations
      tags:
        - Request Validations
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '200':
          description: List Request Validations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Upserts Request Validations
      description: Upsert Request Validation
      operationId: upsertRequestValidations
      tags:
        - Request Validations
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      requestBody:
        description: Request Validation Details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertRequestValidationRequest'
      responses:
        '200':
          description: Updated Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedRequestValidationResponse'
        '201':
          description: Created Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedRequestValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /request-validations/{routekey}:
    delete:
      summary: Delete Request Validation
      description: Delete an existing Request Validation
      operationId: deleteRequestValidation
      tags:
        - Request Validations
      parameters:
        - $ref: '#/components/parameters/RouteKey'
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '204':
          description: Request Validation deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /request-schemas:
    get:
      summary: List Request Schemas
      description: Retrieve list of request schemas
      operationId: listRequestSchemas
      tags:
        - Request Schemas
      responses:
        '200':
          description: List of Request Schemas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRequestSchemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create Request Schema
      description: Create schema for request validation
      operationId: createRequestSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/FileTitle'
      requestBody:
        description: Schema definition
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/JSONSchemaFileContent'
      responses:
        '201':
          description: Created request schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSchemaCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /request-schemas/{schemaid}:
    get:
      summary: Get Request Schema
      description: Retrieve request schema content
      operationId: getRequestSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
      responses:
        '200':
          description: Get Schema File Content
          headers:
            Last-Modified:
              schema:
                type: string
                format: date-time
                minLength: 15
                maxLength: 30
                description: format to use when generating times in headers. Time as in RFC1123 but hard-codes GMT as the time zone
                example: "Sat, 22 Feb 2025 12:02:10 GMT"
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/JSONSchemaFileContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete Request Schema
      description: Delete request schema
      operationId: deleteRequestSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
      responses:
        '204':
          description: Request schema file deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Set Request Schema
      description: Set request schema to newer version
      operationId: putRequestSchema
      tags:
        - Request Schemas
      parameters:
        - $ref: '#/components/parameters/SchemaID'
        - $ref: '#/components/parameters/FileTitle'
      requestBody:
        description: Schema definition
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/JSONSchemaFileContent'
      responses:
        '201':
          description: Request schema file created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          

  /service-levels:
    get:
      summary: List Service Levels
      description: Retrieve HTTP API Service Levels
      operationId: listServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '200':
          description: List Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelsList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Upserts Service Levels
      description: Upsert Service Levels
      operationId: upsertServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/IntegrationID'
      requestBody:
        description: Service Levels details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertServiceLevelsRequest'
      responses:
        '200':
          description: Updated Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedServiceLevelsResponse'
        '201':
          description: Created Service Levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertedServiceLevelsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /service-levels/{routekey}:
    delete:
      summary: Delete Service Levels
      description: Delete an existing Service Levels
      operationId: deleteServiceLevels
      tags:
        - Service Levels
      parameters:
        - $ref: '#/components/parameters/RouteKey'
        - $ref: '#/components/parameters/IntegrationID'
      responses:
        '204':
          description: Service Level deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    FileTitle:
      in: query
      required: false
      name: title
      description: name of file
      schema:
        $ref: '#/components/schemas/Title'

    RouteKey:
      in: path
      required: true
      name: routekey
      description: unique key defining route
      schema:
        $ref: '#/components/schemas/RouteKey'

    IntegrationID:
      name: x-integration-id
      in: header
      required: true
      description: Unique identifier of an integration
      schema:
        $ref: '#/components/schemas/IntegrationID'

    SchemaID:
      name: schemaid
      in: path
      required: true
      description: Unique identifier of the request schema
      schema:
        $ref: '#/components/schemas/SchemaID'

  schemas:
    IntegrationID:
      type: string
      minLength: 24
      maxLength: 24
      pattern: "IN[A-Za-z0-9_\\-]+"
      example: INx3zt0ygAcQGBAQEBAQEBAQ

    SchemaID:
      type: string
      minLength: 24
      maxLength: 24
      pattern: "SC[A-Za-z0-9_\\-]+"
      example: SCx3zt0ygAcQGBAQEBAQEBAQ

    JSONSchemaFileContent:
      type: string
      format: binary
      example: "{}"
      minLength: 2
      maxLength: 355000
      description: https://json-schema.org/draft/2020-12/json-schema-core.html

    DateTime:
      type: string
      format: date-time
      minLength: 20
      maxLength: 20
      description: https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 - RFC3339 date-time in UTC
      example: "2017-07-21T17:32:28Z"

    RequestSchemaCreated:
      type: object
      required:
        - schemaID
        - updatedAt
      properties:
        schemaID:
          $ref: '#/components/schemas/SchemaID'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    ListRequestSchemas:
      type: object
      required:
        - schemas
      properties:
        schemas:
          type: array
          maxItems: 1024
          items:
            $ref: '#/components/schemas/SchemaListEntry'
          description: List of uploaded schemas

    SchemaListEntry:
      type: object
      required:
        - schemaID
        - title
        - updatedAt
      properties:
        schemaID:
          $ref: '#/components/schemas/SchemaID'
        title:
          $ref: '#/components/schemas/Title'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    Title:
      type: string
      maxLength: 128
      minLength: 0
      pattern: "[a-zA-Z0-9 _-]"

    UpsertedServiceLevelsResponse:
      type: object
      required:
        - routeKey
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'

    UpsertedRequestValidationResponse:
      type: object
      required:
        - routeKey
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'

    UpsertServiceLevelsRequest:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/Route'
        latency:
          $ref: '#/components/schemas/LatencyServiceLevels'
        status:
          $ref: '#/components/schemas/StatusServiceLevels'
        validation:
          $ref: '#/components/schemas/ValidationServiceLevels'

    UpsertRequestValidationRequest:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/Route'
        requestSchema:
          $ref: '#/components/schemas/RequestValidationSchema'
        responseSchema:
          $ref: '#/components/schemas/ResponseValidationSchema'
    
    RequestValidationSchema:
      type: object
      properties:
        headerSchemaID:
          $ref: '#/components/schemas/SchemaID'
        querySchemaID:
          $ref: '#/components/schemas/SchemaID'
        bodySchemaID:
          $ref: '#/components/schemas/SchemaID'

    ResponseValidationSchema:
      type: object
      properties:
        headerSchemaID:
          $ref: '#/components/schemas/SchemaID'
        bodySchemaID:
          $ref: '#/components/schemas/SchemaID'

    RouteKey:
      type: string
      minLength: 13
      maxLength: 13
      pattern: "RK[A-Za-z0-9_\\-]+"
      example: RKyx_d19M6zrA

    ServiceLevelsList:
      type: object
      description: List of Service Levels for an integration
      required:
        - routes
      properties:
        routes:
          type: array
          maxItems: 1024
          items:
            $ref: '#/components/schemas/RouteServiceLevels'
          description: List of route-specific Service Levels

    RequestValidationList:
      type: object
      description: List of Request Validations for an integration
      required:
        - route-validations
      properties:
        route-validations:
          type: array
          maxItems: 1024
          items:
            $ref: '#/components/schemas/RouteRequestValidation'
          description: List of route-specific Request Validations

    RouteRequestValidation:
      type: object
      required:
        - routeKey
        - route
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'
        route:
          $ref: '#/components/schemas/Route'
        requestSchema:
          $ref: '#/components/schemas/RequestValidationSchema'
        responseSchema:
          $ref: '#/components/schemas/ResponseValidationSchema'

    Route:
      type: object
      properties:
        method:
          type: string
          enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
          description: HTTP method (GET, POST, PUT, DELETE, etc.)
          example: "GET"
        host:
          type: string
          format: uri
          minLength: 1
          maxLength: 65535
          description: Host name
          example: "api.example.com"
        port:
          type: integer
          minimum: 1
          maximum: 65535
          format: int32
          example: 8080
        path:
          type: string
          format: uri
          minLength: 1
          maxLength: 8192
          description: URL path pattern
          example: "/api/users/{id}"

    RouteServiceLevels:
      type: object
      required:
        - routeKey
        - route
      properties:
        routeKey:
          $ref: '#/components/schemas/RouteKey'
        route:
          $ref: '#/components/schemas/Route'
        latency:
          $ref: '#/components/schemas/LatencyServiceLevels'
        status:
          $ref: '#/components/schemas/StatusServiceLevels'
        validation:
          $ref: '#/components/schemas/ValidationServiceLevels'

    LatencyServiceLevels:
      type: object
      required:
        - percentiles
        - windowDuration
      properties:
        percentiles:
          type: array
          maxItems: 124
          items:
            $ref: '#/components/schemas/PercentileThreshold'
          description: Latency percentiles
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    ValidationServiceLevels:
      type: object
      required:
        - breachThreshold
        - windowDuration
      properties:
        breachThreshold:
          $ref: '#/components/schemas/PercentileValue'
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    StatusServiceLevels:
      type: object
      required:
        - expected
        - breachThreshold
        - windowDuration
      properties:
        expected:
          type: array
          maxItems: 128
          items:
            type: string
            format: string
            enum: [ "100", "101", "102", "103",
                    "200", "201", "202", "203", "204", "205", "206", "207", "208", "218", "226",
                    "300", "301", "302", "303", "304", "305", "306", "307", "308",
                    "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410",
                    "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421",
                    "422", "423", "424", "426", "428", "429", "430", "431", "440", "444", "449",
                    "450", "451", "460", "463", "464", "494", "495", "496", "497", "498", "499",
                    "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511",
                    "520", "521", "522", "523", "524", "525", "526", "527", "529", "530", "540", "561", "598", "599"
            ]
          description: List of expected HTTP status codes
          example: ["200", "201", "204"]
        breachThreshold:
          $ref: '#/components/schemas/PercentileValue'
        windowDuration:
          $ref: '#/components/schemas/WindowValue'

    PercentileThreshold:
      type: object
      required:
        - percentile
        - breachLatency
      properties:
        percentile:
          $ref: '#/components/schemas/PercentileValue'
        breachLatency:
          $ref: '#/components/schemas/LatencyValue'

    PercentileValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(\\.\\d+)?%$"
      description: Percentile value (0.0% to 100.0%)
      example: "99.9%"
      x-go-type: Percentile

    WindowValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(s|m|h|d)$"
      x-go-type: Duration
      description: Duration string (e.g., "5m", "1h", "30s")
      example: "1h"

    LatencyValue:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^\\d+(s|m|h|d)$"
      x-go-type: Duration
      description: Latency threshold (e.g., "1s", "2500ms", "20s")
      example: "2s"

    Error:
      type: object
      description: Detailed error response
      required:
        - code
        - message
      properties:
        code:
          type: string
          format: string
          minLength: 1
          maxLength: 64
          description: Error code
        message:
          type: string
          format: string
          minLength: 1
          maxLength: 1024
          description: Human-readable error message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      description: RFC8725 Compliant JWT
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Request Schemas
    description: Operations for managing HTTP request schemas
  - name: Request Validations
    description: Operations for managing HTTP request validations
  - name: Service Levels
    description: Operations for managing integration Service Levels
