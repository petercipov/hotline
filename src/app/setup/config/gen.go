//go:build go1.22

// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for RouteMethod.
const (
	CONNECT RouteMethod = "CONNECT"
	DELETE  RouteMethod = "DELETE"
	GET     RouteMethod = "GET"
	HEAD    RouteMethod = "HEAD"
	OPTIONS RouteMethod = "OPTIONS"
	PATCH   RouteMethod = "PATCH"
	POST    RouteMethod = "POST"
	PUT     RouteMethod = "PUT"
	TRACE   RouteMethod = "TRACE"
)

// Defines values for StatusServiceLevelsExpected.
const (
	N100 StatusServiceLevelsExpected = "100"
	N101 StatusServiceLevelsExpected = "101"
	N102 StatusServiceLevelsExpected = "102"
	N103 StatusServiceLevelsExpected = "103"
	N200 StatusServiceLevelsExpected = "200"
	N201 StatusServiceLevelsExpected = "201"
	N202 StatusServiceLevelsExpected = "202"
	N203 StatusServiceLevelsExpected = "203"
	N204 StatusServiceLevelsExpected = "204"
	N205 StatusServiceLevelsExpected = "205"
	N206 StatusServiceLevelsExpected = "206"
	N207 StatusServiceLevelsExpected = "207"
	N208 StatusServiceLevelsExpected = "208"
	N218 StatusServiceLevelsExpected = "218"
	N226 StatusServiceLevelsExpected = "226"
	N300 StatusServiceLevelsExpected = "300"
	N301 StatusServiceLevelsExpected = "301"
	N302 StatusServiceLevelsExpected = "302"
	N303 StatusServiceLevelsExpected = "303"
	N304 StatusServiceLevelsExpected = "304"
	N305 StatusServiceLevelsExpected = "305"
	N306 StatusServiceLevelsExpected = "306"
	N307 StatusServiceLevelsExpected = "307"
	N308 StatusServiceLevelsExpected = "308"
	N400 StatusServiceLevelsExpected = "400"
	N401 StatusServiceLevelsExpected = "401"
	N402 StatusServiceLevelsExpected = "402"
	N403 StatusServiceLevelsExpected = "403"
	N404 StatusServiceLevelsExpected = "404"
	N405 StatusServiceLevelsExpected = "405"
	N406 StatusServiceLevelsExpected = "406"
	N407 StatusServiceLevelsExpected = "407"
	N408 StatusServiceLevelsExpected = "408"
	N409 StatusServiceLevelsExpected = "409"
	N410 StatusServiceLevelsExpected = "410"
	N411 StatusServiceLevelsExpected = "411"
	N412 StatusServiceLevelsExpected = "412"
	N413 StatusServiceLevelsExpected = "413"
	N414 StatusServiceLevelsExpected = "414"
	N415 StatusServiceLevelsExpected = "415"
	N416 StatusServiceLevelsExpected = "416"
	N417 StatusServiceLevelsExpected = "417"
	N418 StatusServiceLevelsExpected = "418"
	N419 StatusServiceLevelsExpected = "419"
	N420 StatusServiceLevelsExpected = "420"
	N421 StatusServiceLevelsExpected = "421"
	N422 StatusServiceLevelsExpected = "422"
	N423 StatusServiceLevelsExpected = "423"
	N424 StatusServiceLevelsExpected = "424"
	N426 StatusServiceLevelsExpected = "426"
	N428 StatusServiceLevelsExpected = "428"
	N429 StatusServiceLevelsExpected = "429"
	N430 StatusServiceLevelsExpected = "430"
	N431 StatusServiceLevelsExpected = "431"
	N440 StatusServiceLevelsExpected = "440"
	N444 StatusServiceLevelsExpected = "444"
	N449 StatusServiceLevelsExpected = "449"
	N450 StatusServiceLevelsExpected = "450"
	N451 StatusServiceLevelsExpected = "451"
	N460 StatusServiceLevelsExpected = "460"
	N463 StatusServiceLevelsExpected = "463"
	N464 StatusServiceLevelsExpected = "464"
	N494 StatusServiceLevelsExpected = "494"
	N495 StatusServiceLevelsExpected = "495"
	N496 StatusServiceLevelsExpected = "496"
	N497 StatusServiceLevelsExpected = "497"
	N498 StatusServiceLevelsExpected = "498"
	N499 StatusServiceLevelsExpected = "499"
	N500 StatusServiceLevelsExpected = "500"
	N501 StatusServiceLevelsExpected = "501"
	N502 StatusServiceLevelsExpected = "502"
	N503 StatusServiceLevelsExpected = "503"
	N504 StatusServiceLevelsExpected = "504"
	N505 StatusServiceLevelsExpected = "505"
	N506 StatusServiceLevelsExpected = "506"
	N507 StatusServiceLevelsExpected = "507"
	N508 StatusServiceLevelsExpected = "508"
	N509 StatusServiceLevelsExpected = "509"
	N510 StatusServiceLevelsExpected = "510"
	N511 StatusServiceLevelsExpected = "511"
	N520 StatusServiceLevelsExpected = "520"
	N521 StatusServiceLevelsExpected = "521"
	N522 StatusServiceLevelsExpected = "522"
	N523 StatusServiceLevelsExpected = "523"
	N524 StatusServiceLevelsExpected = "524"
	N525 StatusServiceLevelsExpected = "525"
	N526 StatusServiceLevelsExpected = "526"
	N527 StatusServiceLevelsExpected = "527"
	N529 StatusServiceLevelsExpected = "529"
	N530 StatusServiceLevelsExpected = "530"
	N540 StatusServiceLevelsExpected = "540"
	N561 StatusServiceLevelsExpected = "561"
	N598 StatusServiceLevelsExpected = "598"
	N599 StatusServiceLevelsExpected = "599"
)

// DateTime https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 - RFC3339 date-time in UTC
type DateTime = time.Time

// Error Detailed error response
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// IntegrationID defines model for IntegrationID.
type IntegrationID = string

// JSONSchemaFileContent https://json-schema.org/draft/2020-12/json-schema-core.html
type JSONSchemaFileContent = openapi_types.File

// LatencyServiceLevels defines model for LatencyServiceLevels.
type LatencyServiceLevels struct {
	// Percentiles Latency percentiles
	Percentiles []PercentileThreshold `json:"percentiles"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration WindowValue `json:"windowDuration"`
}

// LatencyValue Latency threshold (e.g., "1s", "2500ms", "20s")
type LatencyValue = Duration

// ListRequestSchemas defines model for ListRequestSchemas.
type ListRequestSchemas struct {
	// Schemas List of uploaded schemas
	Schemas []struct {
		SchemaID SchemaID `json:"schemaID"`

		// UpdatedAt https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 - RFC3339 date-time in UTC
		UpdatedAt DateTime `json:"updatedAt"`
	} `json:"schemas"`
}

// PercentileThreshold defines model for PercentileThreshold.
type PercentileThreshold struct {
	// BreachLatency Latency threshold (e.g., "1s", "2500ms", "20s")
	BreachLatency LatencyValue `json:"breachLatency"`

	// Percentile Percentile value (0.0% to 100.0%)
	Percentile PercentileValue `json:"percentile"`
}

// PercentileValue Percentile value (0.0% to 100.0%)
type PercentileValue = Percentile

// RequestValidationList List of Request Validations for an integration
type RequestValidationList struct {
	// Routes List of route-specific Request Validations
	Routes []RouteRequestValidation `json:"routes"`
}

// RequestValidationSchema defines model for RequestValidationSchema.
type RequestValidationSchema struct {
	BodySchemaID   *SchemaID `json:"bodySchemaID,omitempty"`
	HeaderSchemaID *SchemaID `json:"headerSchemaID,omitempty"`
	QuerySchemaID  *SchemaID `json:"querySchemaID,omitempty"`
}

// ResponseValidationSchema defines model for ResponseValidationSchema.
type ResponseValidationSchema struct {
	BodySchemaID   *SchemaID `json:"bodySchemaID,omitempty"`
	HeaderSchemaID *SchemaID `json:"headerSchemaID,omitempty"`
}

// Route defines model for Route.
type Route struct {
	// Host Host name
	Host *string `json:"host,omitempty"`

	// Method HTTP method (GET, POST, PUT, DELETE, etc.)
	Method *RouteMethod `json:"method,omitempty"`

	// Path URL path pattern
	Path *string `json:"path,omitempty"`
	Port *int32  `json:"port,omitempty"`
}

// RouteMethod HTTP method (GET, POST, PUT, DELETE, etc.)
type RouteMethod string

// RouteKey defines model for RouteKey.
type RouteKey = string

// RouteRequestValidation defines model for RouteRequestValidation.
type RouteRequestValidation struct {
	RequestSchema  *RequestValidationSchema  `json:"requestSchema,omitempty"`
	ResponseSchema *ResponseValidationSchema `json:"responseSchema,omitempty"`
	Route          Route                     `json:"route"`
	RouteKey       RouteKey                  `json:"routeKey"`
}

// RouteServiceLevels defines model for RouteServiceLevels.
type RouteServiceLevels struct {
	Latency    *LatencyServiceLevels    `json:"latency,omitempty"`
	Route      Route                    `json:"route"`
	RouteKey   RouteKey                 `json:"routeKey"`
	Status     *StatusServiceLevels     `json:"status,omitempty"`
	Validation *ValidationServiceLevels `json:"validation,omitempty"`
}

// SchemaID defines model for SchemaID.
type SchemaID = string

// ServiceLevelsList List of Service Levels for an integration
type ServiceLevelsList struct {
	// Routes List of route-specific Service Levels
	Routes []RouteServiceLevels `json:"routes"`
}

// StatusServiceLevels defines model for StatusServiceLevels.
type StatusServiceLevels struct {
	// BreachThreshold Percentile value (0.0% to 100.0%)
	BreachThreshold PercentileValue `json:"breachThreshold"`

	// Expected List of expected HTTP status codes
	Expected []StatusServiceLevelsExpected `json:"expected"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration WindowValue `json:"windowDuration"`
}

// StatusServiceLevelsExpected defines model for StatusServiceLevels.Expected.
type StatusServiceLevelsExpected string

// UploadRequestSchemaResponse defines model for UploadRequestSchemaResponse.
type UploadRequestSchemaResponse struct {
	SchemaID *SchemaID `json:"schemaID,omitempty"`

	// UpdatedAt https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 - RFC3339 date-time in UTC
	UpdatedAt *DateTime `json:"updatedAt,omitempty"`
}

// UpsertRequestValidationRequest defines model for UpsertRequestValidationRequest.
type UpsertRequestValidationRequest struct {
	RequestSchema  *RequestValidationSchema  `json:"requestSchema,omitempty"`
	ResponseSchema *ResponseValidationSchema `json:"responseSchema,omitempty"`
	Route          Route                     `json:"route"`
}

// UpsertServiceLevelsRequest defines model for UpsertServiceLevelsRequest.
type UpsertServiceLevelsRequest struct {
	Latency    *LatencyServiceLevels    `json:"latency,omitempty"`
	Route      Route                    `json:"route"`
	Status     *StatusServiceLevels     `json:"status,omitempty"`
	Validation *ValidationServiceLevels `json:"validation,omitempty"`
}

// UpsertedRequestValidationResponse defines model for UpsertedRequestValidationResponse.
type UpsertedRequestValidationResponse struct {
	RouteKey *RouteKey `json:"routeKey,omitempty"`
}

// UpsertedServiceLevelsResponse defines model for UpsertedServiceLevelsResponse.
type UpsertedServiceLevelsResponse struct {
	RouteKey *RouteKey `json:"routeKey,omitempty"`
}

// ValidationServiceLevels defines model for ValidationServiceLevels.
type ValidationServiceLevels struct {
	// BreachThreshold Percentile value (0.0% to 100.0%)
	BreachThreshold PercentileValue `json:"breachThreshold"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration WindowValue `json:"windowDuration"`
}

// WindowValue Duration string (e.g., "5m", "1h", "30s")
type WindowValue = Duration

// BadRequest Detailed error response
type BadRequest = Error

// InternalServerError Detailed error response
type InternalServerError = Error

// NotFound Detailed error response
type NotFound = Error

// TooManyRequests Detailed error response
type TooManyRequests = Error

// Unauthorized Detailed error response
type Unauthorized = Error

// UploadSchemaMultipartBody defines parameters for UploadSchema.
type UploadSchemaMultipartBody struct {
	// Jsonschema https://json-schema.org/draft/2020-12/json-schema-core.html
	Jsonschema *JSONSchemaFileContent `json:"jsonschema,omitempty"`
}

// UploadSchemaFileMultipartBody defines parameters for UploadSchemaFile.
type UploadSchemaFileMultipartBody struct {
	// Jsonschema https://json-schema.org/draft/2020-12/json-schema-core.html
	Jsonschema *JSONSchemaFileContent `json:"jsonschema,omitempty"`
}

// GetRequestValidationsParams defines parameters for GetRequestValidations.
type GetRequestValidationsParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// UpsertRequestValidationsParams defines parameters for UpsertRequestValidations.
type UpsertRequestValidationsParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// DeleteRequestValidationParams defines parameters for DeleteRequestValidation.
type DeleteRequestValidationParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// GetServiceLevelsParams defines parameters for GetServiceLevels.
type GetServiceLevelsParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// UpsertServiceLevelsParams defines parameters for UpsertServiceLevels.
type UpsertServiceLevelsParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// DeleteServiceLevelsParams defines parameters for DeleteServiceLevels.
type DeleteServiceLevelsParams struct {
	// XIntegrationId Unique identifier of an integration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// UploadSchemaMultipartRequestBody defines body for UploadSchema for multipart/form-data ContentType.
type UploadSchemaMultipartRequestBody UploadSchemaMultipartBody

// UploadSchemaFileMultipartRequestBody defines body for UploadSchemaFile for multipart/form-data ContentType.
type UploadSchemaFileMultipartRequestBody UploadSchemaFileMultipartBody

// UpsertRequestValidationsJSONRequestBody defines body for UpsertRequestValidations for application/json ContentType.
type UpsertRequestValidationsJSONRequestBody = UpsertRequestValidationRequest

// UpsertServiceLevelsJSONRequestBody defines body for UpsertServiceLevels for application/json ContentType.
type UpsertServiceLevelsJSONRequestBody = UpsertServiceLevelsRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListSchemas request
	ListSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadSchemaWithBody request with any body
	UploadSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSchemaFile request
	DeleteSchemaFile(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema request
	GetSchema(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadSchemaFileWithBody request with any body
	UploadSchemaFileWithBody(ctx context.Context, schemaid SchemaID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestValidations request
	GetRequestValidations(ctx context.Context, params *GetRequestValidationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertRequestValidationsWithBody request with any body
	UpsertRequestValidationsWithBody(ctx context.Context, params *UpsertRequestValidationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertRequestValidations(ctx context.Context, params *UpsertRequestValidationsParams, body UpsertRequestValidationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRequestValidation request
	DeleteRequestValidation(ctx context.Context, routekey RouteKey, params *DeleteRequestValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceLevels request
	GetServiceLevels(ctx context.Context, params *GetServiceLevelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertServiceLevelsWithBody request with any body
	UpsertServiceLevelsWithBody(ctx context.Context, params *UpsertServiceLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertServiceLevels(ctx context.Context, params *UpsertServiceLevelsParams, body UpsertServiceLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceLevels request
	DeleteServiceLevels(ctx context.Context, routekey RouteKey, params *DeleteServiceLevelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSchemaFile(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSchemaFileRequest(c.Server, schemaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchemaRequest(c.Server, schemaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadSchemaFileWithBody(ctx context.Context, schemaid SchemaID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSchemaFileRequestWithBody(c.Server, schemaid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestValidations(ctx context.Context, params *GetRequestValidationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestValidationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertRequestValidationsWithBody(ctx context.Context, params *UpsertRequestValidationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRequestValidationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertRequestValidations(ctx context.Context, params *UpsertRequestValidationsParams, body UpsertRequestValidationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRequestValidationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRequestValidation(ctx context.Context, routekey RouteKey, params *DeleteRequestValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequestValidationRequest(c.Server, routekey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceLevels(ctx context.Context, params *GetServiceLevelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceLevelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertServiceLevelsWithBody(ctx context.Context, params *UpsertServiceLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertServiceLevelsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertServiceLevels(ctx context.Context, params *UpsertServiceLevelsParams, body UpsertServiceLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertServiceLevelsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceLevels(ctx context.Context, routekey RouteKey, params *DeleteServiceLevelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceLevelsRequest(c.Server, routekey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListSchemasRequest generates requests for ListSchemas
func NewListSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadSchemaRequestWithBody generates requests for UploadSchema with any type of body
func NewUploadSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSchemaFileRequest generates requests for DeleteSchemaFile
func NewDeleteSchemaFileRequest(server string, schemaid SchemaID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schemaid", runtime.ParamLocationPath, schemaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchemaRequest generates requests for GetSchema
func NewGetSchemaRequest(server string, schemaid SchemaID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schemaid", runtime.ParamLocationPath, schemaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadSchemaFileRequestWithBody generates requests for UploadSchemaFile with any type of body
func NewUploadSchemaFileRequestWithBody(server string, schemaid SchemaID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schemaid", runtime.ParamLocationPath, schemaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequestValidationsRequest generates requests for GetRequestValidations
func NewGetRequestValidationsRequest(server string, params *GetRequestValidationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-validations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewUpsertRequestValidationsRequest calls the generic UpsertRequestValidations builder with application/json body
func NewUpsertRequestValidationsRequest(server string, params *UpsertRequestValidationsParams, body UpsertRequestValidationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertRequestValidationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpsertRequestValidationsRequestWithBody generates requests for UpsertRequestValidations with any type of body
func NewUpsertRequestValidationsRequestWithBody(server string, params *UpsertRequestValidationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-validations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewDeleteRequestValidationRequest generates requests for DeleteRequestValidation
func NewDeleteRequestValidationRequest(server string, routekey RouteKey, params *DeleteRequestValidationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routekey", runtime.ParamLocationPath, routekey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request-validations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewGetServiceLevelsRequest generates requests for GetServiceLevels
func NewGetServiceLevelsRequest(server string, params *GetServiceLevelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-levels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewUpsertServiceLevelsRequest calls the generic UpsertServiceLevels builder with application/json body
func NewUpsertServiceLevelsRequest(server string, params *UpsertServiceLevelsParams, body UpsertServiceLevelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertServiceLevelsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpsertServiceLevelsRequestWithBody generates requests for UpsertServiceLevels with any type of body
func NewUpsertServiceLevelsRequestWithBody(server string, params *UpsertServiceLevelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-levels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewDeleteServiceLevelsRequest generates requests for DeleteServiceLevels
func NewDeleteServiceLevelsRequest(server string, routekey RouteKey, params *DeleteServiceLevelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routekey", runtime.ParamLocationPath, routekey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service-levels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListSchemasWithResponse request
	ListSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSchemasResponse, error)

	// UploadSchemaWithBodyWithResponse request with any body
	UploadSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSchemaResponse, error)

	// DeleteSchemaFileWithResponse request
	DeleteSchemaFileWithResponse(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*DeleteSchemaFileResponse, error)

	// GetSchemaWithResponse request
	GetSchemaWithResponse(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error)

	// UploadSchemaFileWithBodyWithResponse request with any body
	UploadSchemaFileWithBodyWithResponse(ctx context.Context, schemaid SchemaID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSchemaFileResponse, error)

	// GetRequestValidationsWithResponse request
	GetRequestValidationsWithResponse(ctx context.Context, params *GetRequestValidationsParams, reqEditors ...RequestEditorFn) (*GetRequestValidationsResponse, error)

	// UpsertRequestValidationsWithBodyWithResponse request with any body
	UpsertRequestValidationsWithBodyWithResponse(ctx context.Context, params *UpsertRequestValidationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertRequestValidationsResponse, error)

	UpsertRequestValidationsWithResponse(ctx context.Context, params *UpsertRequestValidationsParams, body UpsertRequestValidationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertRequestValidationsResponse, error)

	// DeleteRequestValidationWithResponse request
	DeleteRequestValidationWithResponse(ctx context.Context, routekey RouteKey, params *DeleteRequestValidationParams, reqEditors ...RequestEditorFn) (*DeleteRequestValidationResponse, error)

	// GetServiceLevelsWithResponse request
	GetServiceLevelsWithResponse(ctx context.Context, params *GetServiceLevelsParams, reqEditors ...RequestEditorFn) (*GetServiceLevelsResponse, error)

	// UpsertServiceLevelsWithBodyWithResponse request with any body
	UpsertServiceLevelsWithBodyWithResponse(ctx context.Context, params *UpsertServiceLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertServiceLevelsResponse, error)

	UpsertServiceLevelsWithResponse(ctx context.Context, params *UpsertServiceLevelsParams, body UpsertServiceLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertServiceLevelsResponse, error)

	// DeleteServiceLevelsWithResponse request
	DeleteServiceLevelsWithResponse(ctx context.Context, routekey RouteKey, params *DeleteServiceLevelsParams, reqEditors ...RequestEditorFn) (*DeleteServiceLevelsResponse, error)
}

type ListSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRequestSchemas
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UploadRequestSchemaResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UploadSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSchemaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteSchemaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSchemaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JSONSchemaFileContent
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadSchemaFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UploadSchemaFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadSchemaFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestValidationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestValidationList
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetRequestValidationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestValidationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertRequestValidationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpsertedRequestValidationResponse
	JSON201      *UpsertedRequestValidationResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpsertRequestValidationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertRequestValidationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRequestValidationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteRequestValidationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequestValidationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceLevelsList
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetServiceLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertServiceLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpsertedServiceLevelsResponse
	JSON201      *UpsertedServiceLevelsResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpsertServiceLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertServiceLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteServiceLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListSchemasWithResponse request returning *ListSchemasResponse
func (c *ClientWithResponses) ListSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSchemasResponse, error) {
	rsp, err := c.ListSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSchemasResponse(rsp)
}

// UploadSchemaWithBodyWithResponse request with arbitrary body returning *UploadSchemaResponse
func (c *ClientWithResponses) UploadSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSchemaResponse, error) {
	rsp, err := c.UploadSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSchemaResponse(rsp)
}

// DeleteSchemaFileWithResponse request returning *DeleteSchemaFileResponse
func (c *ClientWithResponses) DeleteSchemaFileWithResponse(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*DeleteSchemaFileResponse, error) {
	rsp, err := c.DeleteSchemaFile(ctx, schemaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSchemaFileResponse(rsp)
}

// GetSchemaWithResponse request returning *GetSchemaResponse
func (c *ClientWithResponses) GetSchemaWithResponse(ctx context.Context, schemaid SchemaID, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error) {
	rsp, err := c.GetSchema(ctx, schemaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchemaResponse(rsp)
}

// UploadSchemaFileWithBodyWithResponse request with arbitrary body returning *UploadSchemaFileResponse
func (c *ClientWithResponses) UploadSchemaFileWithBodyWithResponse(ctx context.Context, schemaid SchemaID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSchemaFileResponse, error) {
	rsp, err := c.UploadSchemaFileWithBody(ctx, schemaid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSchemaFileResponse(rsp)
}

// GetRequestValidationsWithResponse request returning *GetRequestValidationsResponse
func (c *ClientWithResponses) GetRequestValidationsWithResponse(ctx context.Context, params *GetRequestValidationsParams, reqEditors ...RequestEditorFn) (*GetRequestValidationsResponse, error) {
	rsp, err := c.GetRequestValidations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestValidationsResponse(rsp)
}

// UpsertRequestValidationsWithBodyWithResponse request with arbitrary body returning *UpsertRequestValidationsResponse
func (c *ClientWithResponses) UpsertRequestValidationsWithBodyWithResponse(ctx context.Context, params *UpsertRequestValidationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertRequestValidationsResponse, error) {
	rsp, err := c.UpsertRequestValidationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertRequestValidationsResponse(rsp)
}

func (c *ClientWithResponses) UpsertRequestValidationsWithResponse(ctx context.Context, params *UpsertRequestValidationsParams, body UpsertRequestValidationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertRequestValidationsResponse, error) {
	rsp, err := c.UpsertRequestValidations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertRequestValidationsResponse(rsp)
}

// DeleteRequestValidationWithResponse request returning *DeleteRequestValidationResponse
func (c *ClientWithResponses) DeleteRequestValidationWithResponse(ctx context.Context, routekey RouteKey, params *DeleteRequestValidationParams, reqEditors ...RequestEditorFn) (*DeleteRequestValidationResponse, error) {
	rsp, err := c.DeleteRequestValidation(ctx, routekey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRequestValidationResponse(rsp)
}

// GetServiceLevelsWithResponse request returning *GetServiceLevelsResponse
func (c *ClientWithResponses) GetServiceLevelsWithResponse(ctx context.Context, params *GetServiceLevelsParams, reqEditors ...RequestEditorFn) (*GetServiceLevelsResponse, error) {
	rsp, err := c.GetServiceLevels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceLevelsResponse(rsp)
}

// UpsertServiceLevelsWithBodyWithResponse request with arbitrary body returning *UpsertServiceLevelsResponse
func (c *ClientWithResponses) UpsertServiceLevelsWithBodyWithResponse(ctx context.Context, params *UpsertServiceLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertServiceLevelsResponse, error) {
	rsp, err := c.UpsertServiceLevelsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertServiceLevelsResponse(rsp)
}

func (c *ClientWithResponses) UpsertServiceLevelsWithResponse(ctx context.Context, params *UpsertServiceLevelsParams, body UpsertServiceLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertServiceLevelsResponse, error) {
	rsp, err := c.UpsertServiceLevels(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertServiceLevelsResponse(rsp)
}

// DeleteServiceLevelsWithResponse request returning *DeleteServiceLevelsResponse
func (c *ClientWithResponses) DeleteServiceLevelsWithResponse(ctx context.Context, routekey RouteKey, params *DeleteServiceLevelsParams, reqEditors ...RequestEditorFn) (*DeleteServiceLevelsResponse, error) {
	rsp, err := c.DeleteServiceLevels(ctx, routekey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceLevelsResponse(rsp)
}

// ParseListSchemasResponse parses an HTTP response from a ListSchemasWithResponse call
func ParseListSchemasResponse(rsp *http.Response) (*ListSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRequestSchemas
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadSchemaResponse parses an HTTP response from a UploadSchemaWithResponse call
func ParseUploadSchemaResponse(rsp *http.Response) (*UploadSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UploadRequestSchemaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSchemaFileResponse parses an HTTP response from a DeleteSchemaFileWithResponse call
func ParseDeleteSchemaFileResponse(rsp *http.Response) (*DeleteSchemaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSchemaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSchemaResponse parses an HTTP response from a GetSchemaWithResponse call
func ParseGetSchemaResponse(rsp *http.Response) (*GetSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JSONSchemaFileContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadSchemaFileResponse parses an HTTP response from a UploadSchemaFileWithResponse call
func ParseUploadSchemaFileResponse(rsp *http.Response) (*UploadSchemaFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadSchemaFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestValidationsResponse parses an HTTP response from a GetRequestValidationsWithResponse call
func ParseGetRequestValidationsResponse(rsp *http.Response) (*GetRequestValidationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestValidationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestValidationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertRequestValidationsResponse parses an HTTP response from a UpsertRequestValidationsWithResponse call
func ParseUpsertRequestValidationsResponse(rsp *http.Response) (*UpsertRequestValidationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertRequestValidationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpsertedRequestValidationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpsertedRequestValidationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRequestValidationResponse parses an HTTP response from a DeleteRequestValidationWithResponse call
func ParseDeleteRequestValidationResponse(rsp *http.Response) (*DeleteRequestValidationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRequestValidationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceLevelsResponse parses an HTTP response from a GetServiceLevelsWithResponse call
func ParseGetServiceLevelsResponse(rsp *http.Response) (*GetServiceLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceLevelsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertServiceLevelsResponse parses an HTTP response from a UpsertServiceLevelsWithResponse call
func ParseUpsertServiceLevelsResponse(rsp *http.Response) (*UpsertServiceLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertServiceLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpsertedServiceLevelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpsertedServiceLevelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteServiceLevelsResponse parses an HTTP response from a DeleteServiceLevelsWithResponse call
func ParseDeleteServiceLevelsResponse(rsp *http.Response) (*DeleteServiceLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List request schemas
	// (GET /request-schemas)
	ListSchemas(w http.ResponseWriter, r *http.Request)
	// Create Schema
	// (POST /request-schemas)
	UploadSchema(w http.ResponseWriter, r *http.Request)
	// Delete Schema File
	// (DELETE /request-schemas/{schemaid})
	DeleteSchemaFile(w http.ResponseWriter, r *http.Request, schemaid SchemaID)
	// Get request schemas
	// (GET /request-schemas/{schemaid})
	GetSchema(w http.ResponseWriter, r *http.Request, schemaid SchemaID)
	// Upload Schema File
	// (PUT /request-schemas/{schemaid})
	UploadSchemaFile(w http.ResponseWriter, r *http.Request, schemaid SchemaID)
	// List Request Validations
	// (GET /request-validations)
	GetRequestValidations(w http.ResponseWriter, r *http.Request, params GetRequestValidationsParams)
	// Upserts Request Validations
	// (POST /request-validations)
	UpsertRequestValidations(w http.ResponseWriter, r *http.Request, params UpsertRequestValidationsParams)
	// Delete Request Validation
	// (DELETE /request-validations/{routekey})
	DeleteRequestValidation(w http.ResponseWriter, r *http.Request, routekey RouteKey, params DeleteRequestValidationParams)
	// List Service Levels
	// (GET /service-levels)
	GetServiceLevels(w http.ResponseWriter, r *http.Request, params GetServiceLevelsParams)
	// Upserts Service Levels
	// (POST /service-levels)
	UpsertServiceLevels(w http.ResponseWriter, r *http.Request, params UpsertServiceLevelsParams)
	// Delete Service Levels
	// (DELETE /service-levels/{routekey})
	DeleteServiceLevels(w http.ResponseWriter, r *http.Request, routekey RouteKey, params DeleteServiceLevelsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListSchemas operation middleware
func (siw *ServerInterfaceWrapper) ListSchemas(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadSchema operation middleware
func (siw *ServerInterfaceWrapper) UploadSchema(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadSchema(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSchemaFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteSchemaFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "schemaid" -------------
	var schemaid SchemaID

	err = runtime.BindStyledParameterWithOptions("simple", "schemaid", r.PathValue("schemaid"), &schemaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schemaid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSchemaFile(w, r, schemaid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchema operation middleware
func (siw *ServerInterfaceWrapper) GetSchema(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "schemaid" -------------
	var schemaid SchemaID

	err = runtime.BindStyledParameterWithOptions("simple", "schemaid", r.PathValue("schemaid"), &schemaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schemaid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchema(w, r, schemaid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadSchemaFile operation middleware
func (siw *ServerInterfaceWrapper) UploadSchemaFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "schemaid" -------------
	var schemaid SchemaID

	err = runtime.BindStyledParameterWithOptions("simple", "schemaid", r.PathValue("schemaid"), &schemaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schemaid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadSchemaFile(w, r, schemaid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestValidations operation middleware
func (siw *ServerInterfaceWrapper) GetRequestValidations(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRequestValidationsParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestValidations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertRequestValidations operation middleware
func (siw *ServerInterfaceWrapper) UpsertRequestValidations(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpsertRequestValidationsParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertRequestValidations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRequestValidation operation middleware
func (siw *ServerInterfaceWrapper) DeleteRequestValidation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "routekey" -------------
	var routekey RouteKey

	err = runtime.BindStyledParameterWithOptions("simple", "routekey", r.PathValue("routekey"), &routekey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "routekey", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteRequestValidationParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRequestValidation(w, r, routekey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceLevels operation middleware
func (siw *ServerInterfaceWrapper) GetServiceLevels(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceLevelsParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceLevels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertServiceLevels operation middleware
func (siw *ServerInterfaceWrapper) UpsertServiceLevels(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpsertServiceLevelsParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertServiceLevels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteServiceLevels operation middleware
func (siw *ServerInterfaceWrapper) DeleteServiceLevels(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "routekey" -------------
	var routekey RouteKey

	err = runtime.BindStyledParameterWithOptions("simple", "routekey", r.PathValue("routekey"), &routekey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "routekey", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteServiceLevelsParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteServiceLevels(w, r, routekey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/request-schemas", wrapper.ListSchemas)
	m.HandleFunc("POST "+options.BaseURL+"/request-schemas", wrapper.UploadSchema)
	m.HandleFunc("DELETE "+options.BaseURL+"/request-schemas/{schemaid}", wrapper.DeleteSchemaFile)
	m.HandleFunc("GET "+options.BaseURL+"/request-schemas/{schemaid}", wrapper.GetSchema)
	m.HandleFunc("PUT "+options.BaseURL+"/request-schemas/{schemaid}", wrapper.UploadSchemaFile)
	m.HandleFunc("GET "+options.BaseURL+"/request-validations", wrapper.GetRequestValidations)
	m.HandleFunc("POST "+options.BaseURL+"/request-validations", wrapper.UpsertRequestValidations)
	m.HandleFunc("DELETE "+options.BaseURL+"/request-validations/{routekey}", wrapper.DeleteRequestValidation)
	m.HandleFunc("GET "+options.BaseURL+"/service-levels", wrapper.GetServiceLevels)
	m.HandleFunc("POST "+options.BaseURL+"/service-levels", wrapper.UpsertServiceLevels)
	m.HandleFunc("DELETE "+options.BaseURL+"/service-levels/{routekey}", wrapper.DeleteServiceLevels)

	return m
}
