//go:build go1.22

// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for RouteMethod.
const (
	CONNECT RouteMethod = "CONNECT"
	DELETE  RouteMethod = "DELETE"
	GET     RouteMethod = "GET"
	HEAD    RouteMethod = "HEAD"
	OPTIONS RouteMethod = "OPTIONS"
	PATCH   RouteMethod = "PATCH"
	POST    RouteMethod = "POST"
	PUT     RouteMethod = "PUT"
	TRACE   RouteMethod = "TRACE"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// LatencySLODefinition defines model for LatencySLODefinition.
type LatencySLODefinition struct {
	// Percentiles Latency percentile definitions
	Percentiles []PercentileThreshold `json:"percentiles"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration Duration `json:"windowDuration"`
}

// ListDefinitions defines model for ListDefinitions.
type ListDefinitions struct {
	// Routes List of route-specific SLO configurations
	Routes []RouteSLODefinition `json:"routes"`
}

// PercentileThreshold defines model for PercentileThreshold.
type PercentileThreshold struct {
	// BreachLatency Latency threshold (e.g., "1s", "2500ms", "20s")
	BreachLatency Duration `json:"breachLatency"`

	// Percentile Percentile value (0.0% to 100.0%)
	Percentile Percentile `json:"percentile"`
}

// Route defines model for Route.
type Route struct {
	// Host Host name
	Host string `json:"host,omitempty"`

	// Method HTTP method (GET, POST, PUT, DELETE, etc.)
	Method RouteMethod `json:"method,omitempty"`

	// Path URL path pattern
	Path string `json:"path,omitempty"`
	Port int    `json:"port,omitempty"`
}

// RouteMethod HTTP method (GET, POST, PUT, DELETE, etc.)
type RouteMethod string

// RouteKey defines model for RouteKey.
type RouteKey = string

// RouteSLODefinition defines model for RouteSLODefinition.
type RouteSLODefinition struct {
	Definition SLODefinition `json:"definition,omitempty"`
	Route      Route         `json:"route,omitempty"`
	RouteKey   RouteKey      `json:"routeKey,omitempty"`
}

// SLODefinition defines model for SLODefinition.
type SLODefinition struct {
	Latency LatencySLODefinition `json:"latency"`
	Status  StatusSLODefinition  `json:"status"`
}

// StatusSLODefinition defines model for StatusSLODefinition.
type StatusSLODefinition struct {
	// BreachThreshold Percentile value (0.0% to 100.0%)
	BreachThreshold Percentile `json:"breachThreshold"`

	// Expected List of expected HTTP status codes
	Expected []string `json:"expected"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration Duration `json:"windowDuration"`
}

// UpsertSLORequest defines model for UpsertSLORequest.
type UpsertSLORequest struct {
	Definition SLODefinition `json:"definition,omitempty"`
	Route      Route         `json:"route,omitempty"`
}

// UpsertSLOResponse defines model for UpsertSLOResponse.
type UpsertSLOResponse struct {
	RouteKey RouteKey `json:"routeKey,omitempty"`
}

// IntegrationID defines model for IntegrationID.
type IntegrationID = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetSLOConfigParams defines parameters for GetSLOConfig.
type GetSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// UpsertSLOConfigParams defines parameters for UpsertSLOConfig.
type UpsertSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// DeleteSLOConfigParams defines parameters for DeleteSLOConfig.
type DeleteSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// UpsertSLOConfigJSONRequestBody defines body for UpsertSLOConfig for application/json ContentType.
type UpsertSLOConfigJSONRequestBody = UpsertSLORequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSLOConfig request
	GetSLOConfig(ctx context.Context, params *GetSLOConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertSLOConfigWithBody request with any body
	UpsertSLOConfigWithBody(ctx context.Context, params *UpsertSLOConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertSLOConfig(ctx context.Context, params *UpsertSLOConfigParams, body UpsertSLOConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSLOConfig request
	DeleteSLOConfig(ctx context.Context, routekey RouteKey, params *DeleteSLOConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSLOConfig(ctx context.Context, params *GetSLOConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSLOConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertSLOConfigWithBody(ctx context.Context, params *UpsertSLOConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertSLOConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertSLOConfig(ctx context.Context, params *UpsertSLOConfigParams, body UpsertSLOConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertSLOConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSLOConfig(ctx context.Context, routekey RouteKey, params *DeleteSLOConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSLOConfigRequest(c.Server, routekey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSLOConfigRequest generates requests for GetSLOConfig
func NewGetSLOConfigRequest(server string, params *GetSLOConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slo-definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewUpsertSLOConfigRequest calls the generic UpsertSLOConfig builder with application/json body
func NewUpsertSLOConfigRequest(server string, params *UpsertSLOConfigParams, body UpsertSLOConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertSLOConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpsertSLOConfigRequestWithBody generates requests for UpsertSLOConfig with any type of body
func NewUpsertSLOConfigRequestWithBody(server string, params *UpsertSLOConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slo-definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

// NewDeleteSLOConfigRequest generates requests for DeleteSLOConfig
func NewDeleteSLOConfigRequest(server string, routekey RouteKey, params *DeleteSLOConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routekey", runtime.ParamLocationPath, routekey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slo-definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-integration-id", runtime.ParamLocationHeader, params.XIntegrationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-integration-id", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSLOConfigWithResponse request
	GetSLOConfigWithResponse(ctx context.Context, params *GetSLOConfigParams, reqEditors ...RequestEditorFn) (*GetSLOConfigResponse, error)

	// UpsertSLOConfigWithBodyWithResponse request with any body
	UpsertSLOConfigWithBodyWithResponse(ctx context.Context, params *UpsertSLOConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertSLOConfigResponse, error)

	UpsertSLOConfigWithResponse(ctx context.Context, params *UpsertSLOConfigParams, body UpsertSLOConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertSLOConfigResponse, error)

	// DeleteSLOConfigWithResponse request
	DeleteSLOConfigWithResponse(ctx context.Context, routekey RouteKey, params *DeleteSLOConfigParams, reqEditors ...RequestEditorFn) (*DeleteSLOConfigResponse, error)
}

type GetSLOConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDefinitions
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetSLOConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSLOConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertSLOConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpsertSLOResponse
	JSON201      *UpsertSLOResponse
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpsertSLOConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertSLOConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSLOConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteSLOConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSLOConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSLOConfigWithResponse request returning *GetSLOConfigResponse
func (c *ClientWithResponses) GetSLOConfigWithResponse(ctx context.Context, params *GetSLOConfigParams, reqEditors ...RequestEditorFn) (*GetSLOConfigResponse, error) {
	rsp, err := c.GetSLOConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSLOConfigResponse(rsp)
}

// UpsertSLOConfigWithBodyWithResponse request with arbitrary body returning *UpsertSLOConfigResponse
func (c *ClientWithResponses) UpsertSLOConfigWithBodyWithResponse(ctx context.Context, params *UpsertSLOConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertSLOConfigResponse, error) {
	rsp, err := c.UpsertSLOConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertSLOConfigResponse(rsp)
}

func (c *ClientWithResponses) UpsertSLOConfigWithResponse(ctx context.Context, params *UpsertSLOConfigParams, body UpsertSLOConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertSLOConfigResponse, error) {
	rsp, err := c.UpsertSLOConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertSLOConfigResponse(rsp)
}

// DeleteSLOConfigWithResponse request returning *DeleteSLOConfigResponse
func (c *ClientWithResponses) DeleteSLOConfigWithResponse(ctx context.Context, routekey RouteKey, params *DeleteSLOConfigParams, reqEditors ...RequestEditorFn) (*DeleteSLOConfigResponse, error) {
	rsp, err := c.DeleteSLOConfig(ctx, routekey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSLOConfigResponse(rsp)
}

// ParseGetSLOConfigResponse parses an HTTP response from a GetSLOConfigWithResponse call
func ParseGetSLOConfigResponse(rsp *http.Response) (*GetSLOConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSLOConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDefinitions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertSLOConfigResponse parses an HTTP response from a UpsertSLOConfigWithResponse call
func ParseUpsertSLOConfigResponse(rsp *http.Response) (*UpsertSLOConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertSLOConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpsertSLOResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpsertSLOResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSLOConfigResponse parses an HTTP response from a DeleteSLOConfigWithResponse call
func ParseDeleteSLOConfigResponse(rsp *http.Response) (*DeleteSLOConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSLOConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List SLO definitions
	// (GET /slo-definitions)
	GetSLOConfig(w http.ResponseWriter, r *http.Request, params GetSLOConfigParams)
	// Upserts SLO definitions
	// (POST /slo-definitions)
	UpsertSLOConfig(w http.ResponseWriter, r *http.Request, params UpsertSLOConfigParams)
	// Delete SLO definitions
	// (DELETE /slo-definitions/{routekey})
	DeleteSLOConfig(w http.ResponseWriter, r *http.Request, routekey RouteKey, params DeleteSLOConfigParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) GetSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSLOConfig(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) UpsertSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpsertSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSLOConfig(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "routekey" -------------
	var routekey RouteKey

	err = runtime.BindStyledParameterWithOptions("simple", "routekey", r.PathValue("routekey"), &routekey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "routekey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSLOConfig(w, r, routekey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/slo-definitions", wrapper.GetSLOConfig)
	m.HandleFunc("POST "+options.BaseURL+"/slo-definitions", wrapper.UpsertSLOConfig)
	m.HandleFunc("DELETE "+options.BaseURL+"/slo-definitions/{routekey}", wrapper.DeleteSLOConfig)

	return m
}
