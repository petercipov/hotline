//go:build go1.22

// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// Defines values for RouteMethod.
const (
	CONNECT RouteMethod = "CONNECT"
	DELETE  RouteMethod = "DELETE"
	GET     RouteMethod = "GET"
	HEAD    RouteMethod = "HEAD"
	OPTIONS RouteMethod = "OPTIONS"
	PATCH   RouteMethod = "PATCH"
	POST    RouteMethod = "POST"
	PUT     RouteMethod = "PUT"
	TRACE   RouteMethod = "TRACE"
)

// CreateSLORequest defines model for CreateSLORequest.
type CreateSLORequest struct {
	Definition SLODefinition `json:"definition,omitempty"`
	Route      Route         `json:"route,omitempty"`
}

// CreatedSLORequest defines model for CreatedSLORequest.
type CreatedSLORequest struct {
	RouteKey RouteKey `json:"routeKey,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// LatencySLODefinition defines model for LatencySLODefinition.
type LatencySLODefinition struct {
	// Percentiles Latency percentile definitions
	Percentiles []PercentileThreshold `json:"percentiles"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration Duration `json:"windowDuration"`
}

// ListDefinitions defines model for ListDefinitions.
type ListDefinitions struct {
	// Routes List of route-specific SLO configurations
	Routes []RouteSLODefinition `json:"routes"`
}

// PercentileThreshold defines model for PercentileThreshold.
type PercentileThreshold struct {
	// BreachThreshold Latency threshold (e.g., "1s", "2500ms", "20s")
	BreachThreshold Duration `json:"breachThreshold"`

	// Percentile Percentile value (0.0 to 100.0)
	Percentile PercentileValue `json:"percentile"`
}

// PercentileValue Percentile value (0.0 to 100.0)
type PercentileValue = float64

// Route defines model for Route.
type Route struct {
	// Host Host name
	Host string `json:"host,omitempty"`

	// Method HTTP method (GET, POST, PUT, DELETE, etc.)
	Method RouteMethod `json:"method,omitempty"`

	// Path URL path pattern
	Path string `json:"path,omitempty"`
	Port int    `json:"port,omitempty"`
}

// RouteMethod HTTP method (GET, POST, PUT, DELETE, etc.)
type RouteMethod string

// RouteKey defines model for RouteKey.
type RouteKey = string

// RouteSLODefinition defines model for RouteSLODefinition.
type RouteSLODefinition struct {
	Definition SLODefinition `json:"definition,omitempty"`
	Route      Route         `json:"route,omitempty"`
	RouteKey   RouteKey      `json:"routeKey,omitempty"`
}

// SLODefinition defines model for SLODefinition.
type SLODefinition struct {
	Latency LatencySLODefinition `json:"latency"`
	Status  StatusSLODefinition  `json:"status"`
}

// StatusSLODefinition defines model for StatusSLODefinition.
type StatusSLODefinition struct {
	// BreachThreshold Percentile value (0.0 to 100.0)
	BreachThreshold PercentileValue `json:"breachThreshold"`

	// Expected List of expected HTTP status codes
	Expected []string `json:"expected"`

	// WindowDuration Duration string (e.g., "5m", "1h", "30s")
	WindowDuration Duration `json:"windowDuration"`
}

// IntegrationID defines model for IntegrationID.
type IntegrationID = string

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetSLOConfigParams defines parameters for GetSLOConfig.
type GetSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// CreateSLOConfigParams defines parameters for CreateSLOConfig.
type CreateSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// DeleteSLOConfigParams defines parameters for DeleteSLOConfig.
type DeleteSLOConfigParams struct {
	// XIntegrationId Unique identifier of the SLO configuration
	XIntegrationId IntegrationID `json:"x-integration-id"`
}

// CreateSLOConfigJSONRequestBody defines body for CreateSLOConfig for application/json ContentType.
type CreateSLOConfigJSONRequestBody = CreateSLORequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List SLO definitions
	// (GET /slo-definitions/)
	GetSLOConfig(w http.ResponseWriter, r *http.Request, params GetSLOConfigParams)
	// create SLO definitions
	// (POST /slo-definitions/)
	CreateSLOConfig(w http.ResponseWriter, r *http.Request, params CreateSLOConfigParams)
	// Delete SLO definitions
	// (DELETE /slo-definitions/{route-key})
	DeleteSLOConfig(w http.ResponseWriter, r *http.Request, routeKey RouteKey, params DeleteSLOConfigParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) GetSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSLOConfig(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) CreateSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSLOConfig(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSLOConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteSLOConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route-key" -------------
	var routeKey RouteKey

	err = runtime.BindStyledParameterWithOptions("simple", "route-key", r.PathValue("route-key"), &routeKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route-key", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSLOConfigParams

	headers := r.Header

	// ------------- Required header parameter "x-integration-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-integration-id")]; found {
		var XIntegrationId IntegrationID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-integration-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-integration-id", valueList[0], &XIntegrationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-integration-id", Err: err})
			return
		}

		params.XIntegrationId = XIntegrationId

	} else {
		err := fmt.Errorf("Header parameter x-integration-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-integration-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSLOConfig(w, r, routeKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/slo-definitions/", wrapper.GetSLOConfig)
	m.HandleFunc("POST "+options.BaseURL+"/slo-definitions/", wrapper.CreateSLOConfig)
	m.HandleFunc("DELETE "+options.BaseURL+"/slo-definitions/{route-key}", wrapper.DeleteSLOConfig)

	return m
}
